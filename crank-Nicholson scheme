#!/usr/bin/python
#coding: utf-8
#finite difference method solving simple parabolic equations(crank-nicholson)
import numpy as np
import matplotlib.pyplot as plt
#define number of nodes
N = 41
dx =1/(N-1)
#define the time step
T =4000
dt = 1/T

r =dt/(2*np.square(dx))
print (r)
#boundary condition
U=np.zeros(N)

U[1]=0
U[N-1]=0
x = np.linspace(0,1,int(N))

for i in range(0,int((N-1)/2)): 
 U[i]=2*(i/int(N-1))
 U[i]
for i in range(int((N-1)/2),int(N-1)):
 U[i]=2-2*(i/int(N-1))

plt.plot(x,U, label = "initial condition")  
print (U)
A=np.zeros(N)
c=np.zeros(N-1)
a=1+2*r
for i in range(0,N-1):
    c[i]=-r
#crank-nicholson scheme
for iteration in range(0,1000):
  for i in range (0,N-1,1):
    if i<1:
        A[i]=(1-2*r)*U[i]+r*U[i+1]
    elif i>N-2:
        A[i]=r*U[i-1]+(1-2*r)*U[i]
    else:
        A[i]=(1-2*r)*U[i]+r*U[i+1]+r*U[i-1]
  for i in range(0,N-1,1):
      if i<1:
          A[i]=A[i]/a
          c[i]=c[i]/a
      else:
          c[i]=c[i]/(a-(-r)*c[i-1])
          A[i]=(A[i]-(-r)*A[i-1])/(a-(-r)*c[i-1])
  for i in range(N-1,0,-1):
        
         if i>N-2:
          U[i]=A[i]
         else:
           U[i]=A[i]-c[i]*U[i+1]
           c[i]=-r
  plt.plot(x,U)
plt.plot(x,U, label="last condition")
plt.title("crank-nicholson scheme")
plt.xlabel("x")
plt.ylabel("U")
plt.legend()     
plt.show()
